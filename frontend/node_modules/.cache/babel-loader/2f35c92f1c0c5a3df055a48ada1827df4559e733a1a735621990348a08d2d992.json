{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\P12C4F3\\\\OneDrive - Dayforce HCM Inc\\\\Desktop\\\\Movie-1\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [loading, setLoading] = useState(true);\n\n  // API base URL\n  const API_BASE_URL = 'http://localhost:8080/api';\n  useEffect(() => {\n    // Check if user is already logged in on app start\n    const storedToken = localStorage.getItem('token');\n    const storedUser = localStorage.getItem('user');\n    if (storedToken && storedUser) {\n      try {\n        setToken(storedToken);\n        setUser(JSON.parse(storedUser));\n      } catch (error) {\n        console.error('Error parsing stored user data:', error);\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n      }\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    try {\n      console.log('Attempting login for:', email);\n      const response = await fetch(`${API_BASE_URL}/auth/signin`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      console.log('Login response status:', response.status);\n      if (!response.ok) {\n        let errorMessage = 'Login failed';\n        try {\n          const errorData = await response.json();\n          errorMessage = errorData.message || `Server error: ${response.status}`;\n        } catch (jsonError) {\n          console.error('Error parsing error response:', jsonError);\n          errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n        }\n        throw new Error(errorMessage);\n      }\n      const data = await response.json();\n      console.log('Login successful for user:', data.username);\n\n      // Create user object from JWT response\n      const user = {\n        id: data.id,\n        username: data.username,\n        email: data.email,\n        roles: data.roles\n      };\n\n      // Store token and user data\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('user', JSON.stringify(user));\n      setToken(data.token);\n      setUser(user);\n      return {\n        success: true,\n        user: user\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n\n      // Check if it's a network error\n      if (error.message === 'Failed to fetch') {\n        return {\n          success: false,\n          error: 'Unable to connect to server. Please check your internet connection and try again.'\n        };\n      }\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const register = async userData => {\n    try {\n      const url = `${API_BASE_URL}/auth/signup`;\n      console.log('Attempting registration to:', url);\n      console.log('Registration data:', userData);\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      console.log('Response status:', response.status);\n      console.log('Response headers:', response.headers);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Registration failed with status:', response.status);\n        console.error('Error response:', errorText);\n        let errorData;\n        try {\n          errorData = JSON.parse(errorText);\n        } catch (e) {\n          errorData = {\n            message: errorText || 'Registration failed'\n          };\n        }\n        throw new Error(errorData.message || 'Registration failed');\n      }\n      const data = await response.json();\n      console.log('Registration successful:', data);\n      return {\n        success: true,\n        message: data.message\n      };\n    } catch (error) {\n      console.error('Registration error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setToken(null);\n    setUser(null);\n  };\n  const isAuthenticated = () => {\n    return !!token && !!user;\n  };\n  const isAdmin = () => {\n    var _user$roles;\n    return (user === null || user === void 0 ? void 0 : (_user$roles = user.roles) === null || _user$roles === void 0 ? void 0 : _user$roles.includes('ROLE_ADMIN')) || false;\n  };\n  const getAuthHeader = () => {\n    return token ? {\n      Authorization: `Bearer ${token}`\n    } : {};\n  };\n\n  // API helper function with authentication\n  const apiCall = async (endpoint, options = {}) => {\n    const url = endpoint.startsWith('http') ? endpoint : `${API_BASE_URL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...getAuthHeader(),\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n\n      // Handle unauthorized responses\n      if (response.status === 401) {\n        logout();\n        throw new Error('Authentication required');\n      }\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || `HTTP ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('API call error:', error);\n      throw error;\n    }\n  };\n  const value = {\n    user,\n    token,\n    loading,\n    login,\n    register,\n    logout,\n    isAuthenticated,\n    isAdmin,\n    apiCall,\n    getAuthHeader\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"6yaUUgx9bt/8SVo6kb7BgPC/qRU=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","token","setToken","localStorage","getItem","loading","setLoading","API_BASE_URL","storedToken","storedUser","JSON","parse","error","console","removeItem","login","email","password","log","response","fetch","method","headers","body","stringify","status","ok","errorMessage","errorData","json","message","jsonError","statusText","data","username","id","roles","setItem","success","register","userData","url","errorText","text","e","logout","isAuthenticated","isAdmin","_user$roles","includes","getAuthHeader","Authorization","apiCall","endpoint","options","startsWith","config","catch","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/P12C4F3/OneDrive - Dayforce HCM Inc/Desktop/Movie-1/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(localStorage.getItem('token'));\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // API base URL\r\n  const API_BASE_URL = 'http://localhost:8080/api';\r\n\r\n  useEffect(() => {\r\n    // Check if user is already logged in on app start\r\n    const storedToken = localStorage.getItem('token');\r\n    const storedUser = localStorage.getItem('user');\r\n    \r\n    if (storedToken && storedUser) {\r\n      try {\r\n        setToken(storedToken);\r\n        setUser(JSON.parse(storedUser));\r\n      } catch (error) {\r\n        console.error('Error parsing stored user data:', error);\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      console.log('Attempting login for:', email);\r\n      const response = await fetch(`${API_BASE_URL}/auth/signin`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      console.log('Login response status:', response.status);\r\n      \r\n      if (!response.ok) {\r\n        let errorMessage = 'Login failed';\r\n        try {\r\n          const errorData = await response.json();\r\n          errorMessage = errorData.message || `Server error: ${response.status}`;\r\n        } catch (jsonError) {\r\n          console.error('Error parsing error response:', jsonError);\r\n          errorMessage = `HTTP ${response.status}: ${response.statusText}`;\r\n        }\r\n        throw new Error(errorMessage);\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Login successful for user:', data.username);\r\n      \r\n      // Create user object from JWT response\r\n      const user = {\r\n        id: data.id,\r\n        username: data.username,\r\n        email: data.email,\r\n        roles: data.roles\r\n      };\r\n      \r\n      // Store token and user data\r\n      localStorage.setItem('token', data.token);\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n      \r\n      setToken(data.token);\r\n      setUser(user);\r\n      \r\n      return { success: true, user: user };\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      \r\n      // Check if it's a network error\r\n      if (error.message === 'Failed to fetch') {\r\n        return { \r\n          success: false, \r\n          error: 'Unable to connect to server. Please check your internet connection and try again.' \r\n        };\r\n      }\r\n      \r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      const url = `${API_BASE_URL}/auth/signup`;\r\n      console.log('Attempting registration to:', url);\r\n      console.log('Registration data:', userData);\r\n      \r\n      const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(userData),\r\n      });\r\n\r\n      console.log('Response status:', response.status);\r\n      console.log('Response headers:', response.headers);\r\n      \r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error('Registration failed with status:', response.status);\r\n        console.error('Error response:', errorText);\r\n        \r\n        let errorData;\r\n        try {\r\n          errorData = JSON.parse(errorText);\r\n        } catch (e) {\r\n          errorData = { message: errorText || 'Registration failed' };\r\n        }\r\n        throw new Error(errorData.message || 'Registration failed');\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Registration successful:', data);\r\n      return { success: true, message: data.message };\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    setToken(null);\r\n    setUser(null);\r\n  };\r\n\r\n  const isAuthenticated = () => {\r\n    return !!token && !!user;\r\n  };\r\n\r\n  const isAdmin = () => {\r\n    return user?.roles?.includes('ROLE_ADMIN') || false;\r\n  };\r\n\r\n  const getAuthHeader = () => {\r\n    return token ? { Authorization: `Bearer ${token}` } : {};\r\n  };\r\n\r\n  // API helper function with authentication\r\n  const apiCall = async (endpoint, options = {}) => {\r\n    const url = endpoint.startsWith('http') ? endpoint : `${API_BASE_URL}${endpoint}`;\r\n    \r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...getAuthHeader(),\r\n        ...options.headers,\r\n      },\r\n      ...options,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(url, config);\r\n      \r\n      // Handle unauthorized responses\r\n      if (response.status === 401) {\r\n        logout();\r\n        throw new Error('Authentication required');\r\n      }\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(errorData.message || `HTTP ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('API call error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    token,\r\n    loading,\r\n    login,\r\n    register,\r\n    logout,\r\n    isAuthenticated,\r\n    isAdmin,\r\n    apiCall,\r\n    getAuthHeader,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}