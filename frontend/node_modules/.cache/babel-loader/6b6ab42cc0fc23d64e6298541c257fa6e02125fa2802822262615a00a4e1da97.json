{"ast":null,"code":"const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8080/api';class MovieService{// Public endpoints - no authentication required\nasync getMovies(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const params=new URLSearchParams();if(filters.search)params.append('search',filters.search);if(filters.genre)params.append('genre',filters.genre);if(filters.language)params.append('language',filters.language);if(filters.rating)params.append('rating',filters.rating);if(filters.nowShowing===true)params.append('nowShowing','true');if(filters.comingSoon===true)params.append('comingSoon','true');if(filters.page!==undefined)params.append('page',filters.page);if(filters.size!==undefined)params.append('size',filters.size);if(filters.sortBy)params.append('sortBy',filters.sortBy);if(filters.sortDirection)params.append('sortDirection',filters.sortDirection);const response=await fetch(\"\".concat(API_BASE_URL,\"/movies?\").concat(params));if(!response.ok){throw new Error(\"Failed to fetch movies: \".concat(response.statusText));}return response.json();}async getMovieById(id){const response=await fetch(\"\".concat(API_BASE_URL,\"/movies/\").concat(id));if(!response.ok){throw new Error(\"Failed to fetch movie: \".concat(response.statusText));}return response.json();}async getGenres(){const response=await fetch(\"\".concat(API_BASE_URL,\"/movies/genres\"));if(!response.ok){throw new Error(\"Failed to fetch genres: \".concat(response.statusText));}return response.json();}async getLanguages(){const response=await fetch(\"\".concat(API_BASE_URL,\"/movies/languages\"));if(!response.ok){throw new Error(\"Failed to fetch languages: \".concat(response.statusText));}return response.json();}async searchMovies(query){let page=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;let size=arguments.length>2&&arguments[2]!==undefined?arguments[2]:20;const params=new URLSearchParams({query,page:page.toString(),size:size.toString()});const response=await fetch(\"\".concat(API_BASE_URL,\"/public/movies/search?\").concat(params));if(!response.ok){throw new Error(\"Failed to search movies: \".concat(response.statusText));}return response.json();}// Admin endpoints - require authentication\nasync createMovie(movieData,token){const response=await fetch(\"\".concat(API_BASE_URL,\"/movies\"),{method:'POST',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(token)},body:JSON.stringify(movieData)});if(!response.ok){throw new Error(\"Failed to create movie: \".concat(response.statusText));}return response.json();}async updateMovie(id,movieData,token){const response=await fetch(\"\".concat(API_BASE_URL,\"/movies/\").concat(id),{method:'PUT',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(token)},body:JSON.stringify(movieData)});if(!response.ok){throw new Error(\"Failed to update movie: \".concat(response.statusText));}return response.json();}async deleteMovie(id,token){const response=await fetch(\"\".concat(API_BASE_URL,\"/movies/\").concat(id),{method:'DELETE',headers:{'Authorization':\"Bearer \".concat(token)}});if(!response.ok){throw new Error(\"Failed to delete movie: \".concat(response.statusText));}return response.json();}async getMovieStats(token){const response=await fetch(\"\".concat(API_BASE_URL,\"/movies/stats/total\"),{headers:{'Authorization':\"Bearer \".concat(token)}});if(!response.ok){throw new Error(\"Failed to fetch movie stats: \".concat(response.statusText));}return response.json();}}const movieService=new MovieService();export default movieService;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","MovieService","getMovies","filters","arguments","length","undefined","params","URLSearchParams","search","append","genre","language","rating","nowShowing","comingSoon","page","size","sortBy","sortDirection","response","fetch","concat","ok","Error","statusText","json","getMovieById","id","getGenres","getLanguages","searchMovies","query","toString","createMovie","movieData","token","method","headers","body","JSON","stringify","updateMovie","deleteMovie","getMovieStats","movieService"],"sources":["C:/Users/P12C4F3/OneDrive - Dayforce HCM Inc/Desktop/Movie-1/frontend/src/services/movieService.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\r\n\r\nclass MovieService {\r\n  // Public endpoints - no authentication required\r\n  async getMovies(filters = {}) {\r\n    const params = new URLSearchParams();\r\n    \r\n    if (filters.search) params.append('search', filters.search);\r\n    if (filters.genre) params.append('genre', filters.genre);\r\n    if (filters.language) params.append('language', filters.language);\r\n    if (filters.rating) params.append('rating', filters.rating);\r\n    if (filters.nowShowing === true) params.append('nowShowing', 'true');\r\n    if (filters.comingSoon === true) params.append('comingSoon', 'true');\r\n    if (filters.page !== undefined) params.append('page', filters.page);\r\n    if (filters.size !== undefined) params.append('size', filters.size);\r\n    if (filters.sortBy) params.append('sortBy', filters.sortBy);\r\n    if (filters.sortDirection) params.append('sortDirection', filters.sortDirection);\r\n\r\n    const response = await fetch(`${API_BASE_URL}/movies?${params}`);\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch movies: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  async getMovieById(id) {\r\n    const response = await fetch(`${API_BASE_URL}/movies/${id}`);\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch movie: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  async getGenres() {\r\n    const response = await fetch(`${API_BASE_URL}/movies/genres`);\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch genres: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  async getLanguages() {\r\n    const response = await fetch(`${API_BASE_URL}/movies/languages`);\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch languages: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  async searchMovies(query, page = 0, size = 20) {\r\n    const params = new URLSearchParams({\r\n      query,\r\n      page: page.toString(),\r\n      size: size.toString()\r\n    });\r\n\r\n    const response = await fetch(`${API_BASE_URL}/public/movies/search?${params}`);\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to search movies: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  // Admin endpoints - require authentication\r\n  async createMovie(movieData, token) {\r\n    const response = await fetch(`${API_BASE_URL}/movies`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify(movieData)\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to create movie: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  async updateMovie(id, movieData, token) {\r\n    const response = await fetch(`${API_BASE_URL}/movies/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify(movieData)\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to update movie: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  async deleteMovie(id, token) {\r\n    const response = await fetch(`${API_BASE_URL}/movies/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to delete movie: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  async getMovieStats(token) {\r\n    const response = await fetch(`${API_BASE_URL}/movies/stats/total`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch movie stats: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n  }\r\n}\r\n\r\nconst movieService = new MovieService();\r\nexport default movieService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}