{"ast":null,"code":"import React from'react';import{Navigate}from'react-router-dom';import{useAuth}from'../../contexts/AuthContext';import{jsx as _jsx}from\"react/jsx-runtime\";const ProtectedRoute=_ref=>{let{children,requireAdmin=false}=_ref;const{user,token,isAdmin}=useAuth();// Check if user is authenticated\nif(!token||!user){return/*#__PURE__*/_jsx(Navigate,{to:\"/login\",replace:true});}// Check if admin access is required\nif(requireAdmin&&!isAdmin()){return/*#__PURE__*/_jsx(Navigate,{to:\"/dashboard\",replace:true});}return children;};export default ProtectedRoute;","map":{"version":3,"names":["React","Navigate","useAuth","jsx","_jsx","ProtectedRoute","_ref","children","requireAdmin","user","token","isAdmin","to","replace"],"sources":["C:/Users/P12C4F3/OneDrive - Dayforce HCM Inc/Desktop/Movie-1/frontend/src/components/auth/ProtectedRoute.js"],"sourcesContent":["import React from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\n\r\nconst ProtectedRoute = ({ children, requireAdmin = false }) => {\r\n  const { user, token, isAdmin } = useAuth();\r\n\r\n  // Check if user is authenticated\r\n  if (!token || !user) {\r\n    return <Navigate to=\"/login\" replace />;\r\n  }\r\n\r\n  // Check if admin access is required\r\n  if (requireAdmin && !isAdmin()) {\r\n    return <Navigate to=\"/dashboard\" replace />;\r\n  }\r\n\r\n  return children;\r\n};\r\n\r\nexport default ProtectedRoute;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,QAAQ,KAAQ,kBAAkB,CAC3C,OAASC,OAAO,KAAQ,4BAA4B,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAErD,KAAM,CAAAC,cAAc,CAAGC,IAAA,EAAwC,IAAvC,CAAEC,QAAQ,CAAEC,YAAY,CAAG,KAAM,CAAC,CAAAF,IAAA,CACxD,KAAM,CAAEG,IAAI,CAAEC,KAAK,CAAEC,OAAQ,CAAC,CAAGT,OAAO,CAAC,CAAC,CAE1C;AACA,GAAI,CAACQ,KAAK,EAAI,CAACD,IAAI,CAAE,CACnB,mBAAOL,IAAA,CAACH,QAAQ,EAACW,EAAE,CAAC,QAAQ,CAACC,OAAO,MAAE,CAAC,CACzC,CAEA;AACA,GAAIL,YAAY,EAAI,CAACG,OAAO,CAAC,CAAC,CAAE,CAC9B,mBAAOP,IAAA,CAACH,QAAQ,EAACW,EAAE,CAAC,YAAY,CAACC,OAAO,MAAE,CAAC,CAC7C,CAEA,MAAO,CAAAN,QAAQ,CACjB,CAAC,CAED,cAAe,CAAAF,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}