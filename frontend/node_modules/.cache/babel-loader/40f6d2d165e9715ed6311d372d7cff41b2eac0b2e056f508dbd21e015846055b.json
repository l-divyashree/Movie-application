{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\nclass MovieService {\n  // Public endpoints - no authentication required\n  async getMovies(filters = {}) {\n    const params = new URLSearchParams();\n    if (filters.search) params.append('search', filters.search);\n    if (filters.genre) params.append('genre', filters.genre);\n    if (filters.language) params.append('language', filters.language);\n    if (filters.rating) params.append('rating', filters.rating);\n    if (filters.nowShowing === true) params.append('nowShowing', 'true');\n    if (filters.comingSoon === true) params.append('comingSoon', 'true');\n    if (filters.page !== undefined) params.append('page', filters.page);\n    if (filters.size !== undefined) params.append('size', filters.size);\n    if (filters.sortBy) params.append('sortBy', filters.sortBy);\n    if (filters.sortDirection) params.append('sortDirection', filters.sortDirection);\n    const response = await fetch(`${API_BASE_URL}/movies?${params}`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch movies: ${response.statusText}`);\n    }\n    return response.json();\n  }\n  async getMovieById(id) {\n    const response = await fetch(`${API_BASE_URL}/movies/${id}`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch movie: ${response.statusText}`);\n    }\n    return response.json();\n  }\n  async getGenres() {\n    const response = await fetch(`${API_BASE_URL}/movies/genres`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch genres: ${response.statusText}`);\n    }\n    return response.json();\n  }\n  async getLanguages() {\n    const response = await fetch(`${API_BASE_URL}/movies/languages`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch languages: ${response.statusText}`);\n    }\n    return response.json();\n  }\n  async searchMovies(query, page = 0, size = 20) {\n    const params = new URLSearchParams({\n      query,\n      page: page.toString(),\n      size: size.toString()\n    });\n    const response = await fetch(`${API_BASE_URL}/public/movies/search?${params}`);\n    if (!response.ok) {\n      throw new Error(`Failed to search movies: ${response.statusText}`);\n    }\n    return response.json();\n  }\n\n  // Admin endpoints - require authentication\n  async createMovie(movieData, token) {\n    const response = await fetch(`${API_BASE_URL}/movies`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify(movieData)\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to create movie: ${response.statusText}`);\n    }\n    return response.json();\n  }\n  async updateMovie(id, movieData, token) {\n    const response = await fetch(`${API_BASE_URL}/movies/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify(movieData)\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to update movie: ${response.statusText}`);\n    }\n    return response.json();\n  }\n  async deleteMovie(id, token) {\n    const response = await fetch(`${API_BASE_URL}/movies/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to delete movie: ${response.statusText}`);\n    }\n    return response.json();\n  }\n  async getMovieStats(token) {\n    const response = await fetch(`${API_BASE_URL}/movies/stats/total`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch movie stats: ${response.statusText}`);\n    }\n    return response.json();\n  }\n}\nconst movieService = new MovieService();\nexport default movieService;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","MovieService","getMovies","filters","params","URLSearchParams","search","append","genre","language","rating","nowShowing","comingSoon","page","undefined","size","sortBy","sortDirection","response","fetch","ok","Error","statusText","json","getMovieById","id","getGenres","getLanguages","searchMovies","query","toString","createMovie","movieData","token","method","headers","body","JSON","stringify","updateMovie","deleteMovie","getMovieStats","movieService"],"sources":["C:/Users/P12C4F3/OneDrive - Dayforce HCM Inc/Desktop/Movie-1/frontend/src/services/movieService.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\r\n\r\nclass MovieService {\r\n  // Public endpoints - no authentication required\r\n  async getMovies(filters = {}) {\r\n    const params = new URLSearchParams();\r\n    \r\n    if (filters.search) params.append('search', filters.search);\r\n    if (filters.genre) params.append('genre', filters.genre);\r\n    if (filters.language) params.append('language', filters.language);\r\n    if (filters.rating) params.append('rating', filters.rating);\r\n    if (filters.nowShowing === true) params.append('nowShowing', 'true');\r\n    if (filters.comingSoon === true) params.append('comingSoon', 'true');\r\n    if (filters.page !== undefined) params.append('page', filters.page);\r\n    if (filters.size !== undefined) params.append('size', filters.size);\r\n    if (filters.sortBy) params.append('sortBy', filters.sortBy);\r\n    if (filters.sortDirection) params.append('sortDirection', filters.sortDirection);\r\n\r\n    const response = await fetch(`${API_BASE_URL}/movies?${params}`);\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch movies: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  async getMovieById(id) {\r\n    const response = await fetch(`${API_BASE_URL}/movies/${id}`);\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch movie: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  async getGenres() {\r\n    const response = await fetch(`${API_BASE_URL}/movies/genres`);\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch genres: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  async getLanguages() {\r\n    const response = await fetch(`${API_BASE_URL}/movies/languages`);\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch languages: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  async searchMovies(query, page = 0, size = 20) {\r\n    const params = new URLSearchParams({\r\n      query,\r\n      page: page.toString(),\r\n      size: size.toString()\r\n    });\r\n\r\n    const response = await fetch(`${API_BASE_URL}/public/movies/search?${params}`);\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to search movies: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  // Admin endpoints - require authentication\r\n  async createMovie(movieData, token) {\r\n    const response = await fetch(`${API_BASE_URL}/movies`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify(movieData)\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to create movie: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  async updateMovie(id, movieData, token) {\r\n    const response = await fetch(`${API_BASE_URL}/movies/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify(movieData)\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to update movie: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  async deleteMovie(id, token) {\r\n    const response = await fetch(`${API_BASE_URL}/movies/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to delete movie: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  async getMovieStats(token) {\r\n    const response = await fetch(`${API_BASE_URL}/movies/stats/total`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch movie stats: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n  }\r\n}\r\n\r\nconst movieService = new MovieService();\r\nexport default movieService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}